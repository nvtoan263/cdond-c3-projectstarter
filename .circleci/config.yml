version: 2.1
executors:
  node-executor:
    docker:
      - image: circleci/node:13.8.0
  node-latest-executor:
    docker:
      - image: circleci/node:latest
  aws-executor:
    docker:
      - image: amazon/aws-cli
  python-executor:
    docker:
      - image: python:3.8      
commands:
  install-aws-executor-dependencies:
    description: "Install some of necessary dependency for amazon/aws-cli image"
    steps:
      - run: yum -y update
      - run: yum install -y jq
      - run: yum install -y tar
      - run: yum install -y gzip
      - run: yum install -y python3
      - run: yum install -y gcc-c++ make
      - run: curl -sL https://rpm.nodesource.com/setup_13.x | bash -
      - run: yum install -y nodejs
      - run: yum update -y awscli
  install-python-executor-dependencies:
    description: "Install some of necessary dependency for python:13.8.0 image"
    steps:  
      - run: apt-get update
      - run: pip install ansible
      - run: apt-get install -y tar
      - run: apt-get install -y gzip
      - run: apt-get install -y awscli
      - run: apt-get install -y npm
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string  
    steps:
      - run:
          name: Echo workflow ID that is going be be destroyed
          when: on_fail
          command: echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy backend stack
          when: on_fail
          command: |
            if aws s3api head-bucket --bucket udapeople-<< parameters.workflowID >>; then
              aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
              aws s3 rb s3://udapeople-<< parameters.workflowID >> --force
            else
              echo "bucket already deleted or not available"
            fi
            
            if aws cloudformation describe-stacks --stack-name udapeople-backend-<< parameters.workflowID >>; then
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
            else
              echo "stack already deleted or not available"
            fi 
      - run:
          name: Destroy frontend stack
          when: on_fail
          command: |
            if aws cloudformation describe-stacks --stack-name udapeople-frontend-<< parameters.workflowID >>; then
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>
            else
              echo "stack already deleted or not available"
            fi
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --request GET --insecure https://kvdb.io/UFkymjGsJvx2GqaNaLpnRo/migration_<< parameters.workflowID >>)
            echo "The value of SUCCESS is: ${SUCCESS}"
            if [[ $SUCCESS==1 ]] 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            else
              echo "Reverting not done as expected, work flow ID is:"
              echo migration_<< parameters.workflowID >>
            fi            
  create-dotenv-file:
    description: Create .env file
    steps:
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=production > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"
            echo NODE_ENV=production >> "./backend/.env"
orbs:
  slack: circleci/slack@4.12.1  
jobs:
  build-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: mkdir -p /tmp/frontend-workspace
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - run: echo "frontend-build-completed" > /tmp/frontend-workspace/output.txt
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - persist_to_workspace:
          root:  /tmp/frontend-workspace
          paths:
            - output.txt
  build-backend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend
  test-backend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend
  scan-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend     
  scan-backend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend
  notify:
    executor: node-latest-executor
    steps:
      - attach_workspace:
          at: /tmp/frontend-workspace
          paths:
            - output.txt
      - run: |
          if [[ $(cat /tmp/frontend-workspace/output.txt) == "frontend-build-completed" ]]; then
            echo "frontend-build successfully";
          else
            cat /tmp/cicd-workspace/output.txt 
            echo "frontend-build failed"; exit 1
          fi
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1          
  deploy-infrastructure:
    executor: aws-executor
    steps:
      - checkout
      - install-aws-executor-dependencies      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Wait for the instance to start running
            aws ec2 wait instance-running --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"
            
            # Get the public IP address of the instance
            # backend-${ID} is the Name's value of created EC2. Refer to backend.yml
            public_ip=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            
            # write ec2's ipaddress to inventory file
            echo $public_ip >>  ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}   
  configure-infrastructure:
    executor: python-executor
    steps:
      - checkout
      # Add the SSH key fingerprint to job so that Ansible will have access to the EC2 instance via SSH.
      - add_ssh_keys:
          fingerprints: ["ee:47:ec:7f:49:b2:c8:0e:73:71:79:6e:bc:98:85:c6"]
      # Attach workspace to access inventory file and other files
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install ansible
            apt-get update
            apt-get install -y tar gzip awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}   
  run-migrations:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less && sudo apt-get install ca-certificates
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Check environment variables
          command: |
            pwd
            ls -l
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}"
            echo "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}"
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}"
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}"
            echo "TYPEORM_HOST=${TYPEORM_HOST}"
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}"
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}"
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}"
            echo "TYPEORM_PORT=${TYPEORM_PORT}"
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # npm audit fix
            # npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt || grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
              curl -k https://kvdb.io/UFkymjGsJvx2GqaNaLpnRo/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            else
              echo "Could not find success message in migrations_dump. Check your migration work!"
            fi
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}      
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-frontend:
    executor: aws-executor
    steps:
      - checkout
      - install-aws-executor-dependencies
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            pwd
            ls -l
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive                       
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}      
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
    
  deploy-backend:
    executor: python-executor
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ee:47:ec:7f:49:b2:c8:0e:73:71:79:6e:bc:98:85:c6"]
      - attach_workspace:
          at: ~/
      - install-python-executor-dependencies
      - create-dotenv-file
      - run:
          name: Copy inventory file from shared workspace to newly clone code
          command: |
            echo "code to use updated inventory file goes here if being use inventory file does no has any host name or ipaddress"
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}      
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

   
  smoke-test:
    executor: python-executor
    steps:
      - checkout
      - install-python-executor-dependencies
      - run:
          name: Smoke test backend - get and curl backend api
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Smoke test frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}      
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    executor: aws-executor
    steps:
      - checkout
      - install-aws-executor-dependencies
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople 
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}      
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
      executor: aws-executor
      steps:
        - checkout
        - install-aws-executor-dependencies
        - run:
            name: Delete S3 buckets
            command: |
              echo "List all S3 buckets and filter by name"
              echo ${CIRCLE_WORKFLOW_ID:0:7}
              for bucket in $(aws s3api list-buckets --query "Buckets[?contains(Name, '${CIRCLE_WORKFLOW_ID:0:7}') == \`false\`].Name" --no-paginate --output text); do
                # Empty the bucket
                aws s3 rm s3://$bucket --recursive
                # Delete the bucket
                aws s3api delete-bucket --bucket $bucket
                echo "Deleted S3 bucket $bucket"
              done

        - run:
            name: Delete CloudFormation stacks
            command: |
              echo "List all CloudFormation stacks and filter by name"
              echo ${CIRCLE_WORKFLOW_ID:0:7}
              for stack in $(aws cloudformation list-stacks --query "StackSummaries[?contains(StackName, '${CIRCLE_WORKFLOW_ID:0:7}') == \`false\` && StackStatus == \`CREATE_COMPLETE\`].StackName" --no-paginate --output text); do
                # Delete the stack
                aws cloudformation delete-stack --stack-name $stack
                # Wait for the stack to be deleted
                aws cloudformation wait stack-delete-complete --stack-name $stack
                echo "Deleted CloudFormation stack $stack"
              done
  test:
    executor: aws-executor
    steps:
      - checkout
      #- install-aws-executor-dependencies
      - run: 
          name: test get s3 list
          command: |
            aws s3api list-buckets --query "Buckets[?contains(Name, '${CIRCLE_WORKFLOW_ID:0:7}') == \`false\`].Name" --no-paginate --output text
      - run: 
          name: test get stack list
          command: |
            aws cloudformation list-stacks --query "StackSummaries[?contains(StackName, '${CIRCLE_WORKFLOW_ID:0:7}') == \`false\` && StackStatus == \`CREATE_COMPLETE\`].StackName" --no-paginate --output text

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend     
      - test-frontend:    
          requires:
          -  build-frontend
      - test-backend:  
          requires:
          -  build-backend
      - scan-frontend:     
          requires:
          -  build-frontend
      - scan-backend:  
          requires:
          -  build-backend
      - notify:
          context: circleci-context
          requires:
          -  build-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires:
          - deploy-infrastructure
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test: 
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update: 
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]