version: 2.1
executors:
  build-executor:
    docker:
      - image: circleci/node:13.8.0
  slack-executor:
    docker:
      - image: circleci/node:latest
  aws-executor:
    docker:
      - image: amazon/aws-cli      
commands:
  install-dependencies:
    description: "Install some of necessary dependency for amazon/aws-cli image"
    steps:
      - run: yum install -y jq
      - run: yum install -y tar
      - run: yum install -y gzip
      - run: yum update -y awscli
orbs:
  slack: circleci/slack@4.12.1  
jobs:
  build-frontend:
    executor: build-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: mkdir -p /tmp/frontend-workspace
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - run: echo "frontend-build-completed" > /tmp/frontend-workspace/output.txt
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - persist_to_workspace:
          root:  /tmp/frontend-workspace
          paths:
            - output.txt
  build-backend:
    executor: build-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    executor: build-executor
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend
  test-backend:
    executor: build-executor
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend
  scan-frontend:
    executor: build-executor
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend     
  scan-backend:
    executor: build-executor
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend
  notify:
    executor: slack-executor
    steps:
      - attach_workspace:
          at: /tmp/frontend-workspace
          paths:
            - output.txt
      - run: |
          if [[ $(cat /tmp/frontend-workspace/output.txt) == "frontend-build-completed" ]]; then
            echo "frontend-build successfully";
          else
            cat /tmp/cicd-workspace/output.txt 
            echo "frontend-build failed"; exit 1
          fi
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1          
  deploy-infrastructure:
    executor: aws-executor
    steps:
      - checkout
      - install-dependencies      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Wait for the instance to start running
            aws ec2 wait instance-running --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"
            
            # Get the public IP address of the instance
            # backend-${ID} is the Name's value of created EC2. Refer to backend.yml
            public_ip=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            
            # write ec2's ipaddress to inventory file
            echo $public_ip >> project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend     
      - test-frontend:    
          requires:
          -  build-frontend
      - test-backend:  
          requires:
          -  build-backend
      - scan-frontend:     
          requires:
          -  build-frontend
      - scan-backend:  
          requires:
          -  build-backend
      - notify:
          context: circleci-context
          requires:
          -  build-frontend
      - deploy-infrastructure